import { RefObject, Ref } from 'react';
declare type Nullable<T> = T | null;
export declare type APIObject = Record<string, any>;
export declare type APIGenerator = () => APIObject;
export declare type GetAPI<T> = (instance: Nullable<T>, prams?: any) => APIGenerator;
export declare type Instantiate<T> = (node: Nullable<HTMLElement>, params?: any) => Nullable<T>;
export declare type Destroy<T> = (instance: Nullable<T>, params?: any) => void;
export interface AptorConfiguration<T, P = any> {
    getAPI: GetAPI<T>;
    instantiate: Instantiate<T>;
    destroy?: Destroy<T>;
    params?: P;
}
/**
 * react aptor(api-connector) a hook which connect api to react itself
 * @param ref - react forwarded ref
 * @param {Object} configuration - configuration object for setup
 * @param {Array} [deps=[]] - react dependencies array
 * @return domRef - can be bound to dom element
 */
export default function useAptor<T, P = any>(ref: Ref<APIObject>, configuration: AptorConfiguration<T, P>, deps?: any[]): RefObject<HTMLElement>;
export {};
